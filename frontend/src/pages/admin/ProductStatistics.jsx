import { useEffect, useState } from "react";

const ProductStatistics = () => {
  const [invoices, setInvoices] = useState([]);
  const [loading, setLoading] = useState(true);
  const [totalRevenue, setTotalRevenue] = useState(0);

  const [fromDate, setFromDate] = useState("");
  const [toDate, setToDate] = useState("");

  // G·ªçi API l·∫•y h√≥a ƒë∆°n
  const fetchInvoices = async (from = "", to = "") => {
    setLoading(true);
    try {
      const params = new URLSearchParams();
      if (from) params.append("from", from);
      if (to) params.append("to", to);

      const res = await fetch(`http://localhost:4004/api/admin/invoices?${params.toString()}`, {
        credentials: "include",
      });

      const json = await res.json();
      if (json.success) {
        setInvoices(json.invoices);
        setTotalRevenue(json.totalRevenue);
      } else {
        console.error("L·ªói backend:", json.error);
      }
    } catch (err) {
      console.error("L·ªói khi g·ªçi API:", err);
    } finally {
      setLoading(false);
    }
  };

  // G·ªçi m·∫∑c ƒë·ªãnh khi m·ªü trang
  useEffect(() => {
    fetchInvoices();
  }, []);

  const handleFilter = () => {
    fetchInvoices(fromDate, toDate);
  };

  const countByPromotion = invoices.reduce((acc, hd) => {
    const key = hd.khuyenmai?.tenkhuyenmai || "Kh√¥ng d√πng";
    acc[key] = (acc[key] || 0) + 1;
    return acc;
  }, {});

  return (
    <div className="p-8">
      <h1 className="text-2xl font-bold mb-6">üìä Th·ªëng k√™ h√≥a ƒë∆°n</h1>

      {/* B·ªô l·ªçc theo ng√†y */}
      <div className="flex flex-wrap items-center gap-4 mb-6">
        <div>
          <label className="block font-semibold">T·ª´ ng√†y:</label>
          <input
            type="date"
            value={fromDate}
            onChange={(e) => setFromDate(e.target.value)}
            className="border p-2 rounded"
          />
        </div>
        <div>
          <label className="block font-semibold">ƒê·∫øn ng√†y:</label>
          <input
            type="date"
            value={toDate}
            onChange={(e) => setToDate(e.target.value)}
            className="border p-2 rounded"
          />
        </div>
        <button
          onClick={handleFilter}
          className="mt-5 bg-blue-600 text-white px-4 py-2 rounded"
        >
          üîç L·ªçc
        </button>
      </div>

      {loading ? (
        <p>‚è≥ ƒêang t·∫£i d·ªØ li·ªáu...</p>
      ) : (
        <>
          {/* Th·ªëng k√™ t·ªïng */}
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 mb-8">
            <div className="bg-gray-100 p-4 rounded shadow-md">
              <h2 className="text-lg font-semibold mb-2">T·ªïng s·ªë h√≥a ƒë∆°n</h2>
              <p className="text-2xl">{invoices.length}</p>
            </div>
            <div className="bg-gray-100 p-4 rounded shadow-md">
              <h2 className="text-lg font-semibold mb-2">T·ªïng doanh thu</h2>
              <p className="text-2xl">{totalRevenue.toLocaleString()} VND</p>
            </div>
            <div className="bg-gray-100 p-4 rounded shadow-md">
              <h2 className="text-lg font-semibold mb-2">Theo khuy·∫øn m√£i</h2>
              <ul>
                {Object.entries(countByPromotion).map(([name, count]) => (
                  <li key={name} className="text-base">
                    {name}: {count} ƒë∆°n
                  </li>
                ))}
              </ul>
            </div>
          </div>

          {/* B·∫£ng chi ti·∫øt h√≥a ƒë∆°n */}
          <div className="overflow-x-auto">
            <table className="min-w-full border border-gray-300">
              <thead className="bg-gray-100">
                <tr>
                  <th className="p-2 border">#</th>
                  <th className="p-2 border">M√£ h√≥a ƒë∆°n</th>
                  <th className="p-2 border">T·ªïng ti·ªÅn</th>
                  <th className="p-2 border">Th√†nh ti·ªÅn</th>
                  <th className="p-2 border">Ng√†y ƒë·∫∑t</th>
                  <th className="p-2 border">T√™n khuy·∫øn m√£i</th>
                </tr>
              </thead>
              <tbody>
                {invoices.map((hd, idx) => (
                  <tr key={hd.mahoadon} className="hover:bg-gray-50">
                    <td className="p-2 border">{idx + 1}</td>
                    <td className="p-2 border">{hd.mahoadon}</td>
                    <td className="p-2 border">{hd.tongtien?.toLocaleString()} VND</td>
                    <td className="p-2 border">{hd.thanhtien?.toLocaleString()} VND</td>
                    <td className="p-2 border">{hd.ngaydat?.slice(0, 10)}</td>
                    <td className="p-2 border">
                      {hd.khuyenmai?.tenkhuyenmai || "Kh√¥ng d√πng"}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </>
      )}
    </div>
  );
};

export default ProductStatistics;
